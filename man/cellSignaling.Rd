% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/SCSRDataModel-class.R
\name{cellSignaling}
\alias{cellSignaling}
\alias{cellSignaling,SCSRDataModel-method}
\title{Cell Signaling}
\usage{
\S4method{cellSignaling}{SCSRDataModel}(
  obj,
  int.type = c("paracrine", "autocrine"),
  s.score = 0.5,
  logFC = log2(1.5),
  tol = 0,
  most.variables = TRUE,
  addLR = NULL,
  switchDB = NULL,
  write = FALSE,
  verbose = TRUE
)
}
\arguments{
\item{obj}{an object of type SCSRDataModel}

\item{int.type}{'autocrine' or 'paracrine'}

\item{s.score}{LRscore threshold}

\item{logFC}{a number, the log fold-change threshold for differentially
expressed genes}

\item{tol}{a tolerance parameter for balancing 'autocrine|paracrine'
interactions to the 'autocrine' or 'paracrine' group}

\item{most.variables}{a logical}

\item{addLR}{NULL or a dataframe with 2 columns}

\item{switchDB}{a dataframe with 2 columns}

\item{write}{a logical}

\item{verbose}{a logical}
}
\value{
A SCSRInference with LR interaction
}
\description{
Computes 'autocrine' or 'paracrine' interactions between cell
clusters.
}
\details{
`int.type` must be equal to 'paracrine' or 'autocrine' exclusively.
The 'paracrine' option looks for ligands expressed in cluster A and their
associated receptors according to LR*db* that are expressed in any other
cluster but A. These interactions are labelled 'paracrine'. The interactions
that involve a ligand and a receptor, both differentially expressed in their
respective cell clusters according to the **edgeR** analysis performed by 
the **cluster_analysis()** function, are labelled 'specific'. The 
'autocrine' option searches for ligands expressed in cell cluster A and
their associated receptors also expressed in A. These interactions are
labelled 'autocrine'. Additionally, it searches for those associated
receptors in the other cell clusters (not A) to cover the part of the
signaling that is 'autocrine' and 'paracrine' simultaneously. These
interactions are labelled 'autocrine/paracrine'.

The `tol` argument allows the user to tolerate a fraction of the cells in
cluster A to express the receptors in case `int.type='paracrine'`, that is
to call interactions that are dominantly paracrine though not exclusively.
Conversely, it allows the user to reject interactions involving receptors
that would be expressed by a small fraction of cluster A cells in case
`int.type='autocrine'`. By construction theassociation of these two 
options covers all the possible interactions and increasing the `tol`
argument allows the user to move interactions from 'autocrine' to 
'paracrine'.

`s.score` is the threshold on the LRscore. The value must lie in the [0;1]
interval, default is 0.5 to ensure confident ligand-receptor pair
identifications (see our publication). Lower values increase the number of
putative interactions while increasing the false positives. Higher values
do the opposite.

`logFC` is a threshold applied to the log fold-change (logFC) computed for
each gene during the differential gene expression analysis. Its default 
value is log~2~(1.5) It further selects the differentially expressed genes
(>logFC) after the p-value threshold imposed in the function 
**cluster_analysis()** below.

If `most.variables` is TRUE, then the function uses the most variable genes
matrix counts if it exists in the object.

The `addLR` allows the user to add LR interaction that they want to study.
It must be a dataframe with one column 'ligand' and one column 'receptor'.

The `switchDB` allows the user to switch the LR database used to study.
interactions.

If `write` is TRUE, then the function writes a text file that reports the
interactions in the *cell-signaling* folder. This file is a 4-column table:
ligands, receptors, interaction types ('paracrine', 'autocrine',
'autocrine/paracrine' and 'specific'), and the associated LRscore.

Remarks:

- This function can be used with any `data` table associated with
corresponding `genes` and `cluster` vectors, meaning that advanced users 
can perform their own data normalization and cell clustering upfront.

- In case the function **cluster_analysis()** was not executed,
this function would work but 'specific' interactions would not be 
annotated as such.
}
\examples{
message('cellSignaling')
message('--dataPrepare')
data <- matrix(runif(1000,0,1),nrow=50,ncol=20)
rownames(data) <- paste('gene',seq_len(50))
obj <- dataPrepare(data)
message('--add Clustering')
obj <- addClustering(obj,cluster.id = sample(1:5,size = 20,replace = TRUE))
message('--cell Signaling')
obj.int <- cellSignaling(obj,int.type = 'paracrine')
}
